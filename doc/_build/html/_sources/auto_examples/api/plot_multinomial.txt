

.. _sphx_glr_auto_examples_api_plot_multinomial.py:


=========================
Multinomial Distribution
=========================

This is an example demonstrating Pyglmnet with
multinomial distributed targets, typical in classification problems.

This canonical link can be used by specifying ``distr`` = ``'multinomial'``.



Multinomial example
^^^^^^^^^^^^^^^^^^^
In the multinomial case
you can provide an array of class labels as targets.



.. code-block:: python


    # Author: Pavan Ramkumar <pavan.ramkumar@gmail.com>
    # License: MIT

    import numpy as np
    import scipy.sparse as sps
    from sklearn.preprocessing import StandardScaler
    import matplotlib.pyplot as plt







Setup the model using scikit learn convenience functions



.. code-block:: python

    from sklearn.datasets import make_classification
    X, y = make_classification(n_samples=10000, n_classes=5,
                               n_informative=100, n_features=100, n_redundant=0)







Fit the model



.. code-block:: python

    from pyglmnet import GLM
    glm_mn = GLM(distr='multinomial', alpha=0.01,
                   reg_lambda=np.array([0.02, 0.01]), verbose=False)
    glm_mn.threshold = 1e-5
    glm_mn.fit(X, y)







Predict and score the output



.. code-block:: python


    y_pred = glm_mn[-1].predict(X).argmax(axis=1)
    print('Percentage correct = %f percent.' % (y_pred == y).mean())





.. rst-class:: sphx-glr-script-out

 Out::

    Percentage correct = 0.605900 percent.


**Total running time of the script:** ( 0 minutes  0.190 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_multinomial.py <plot_multinomial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_multinomial.ipynb <plot_multinomial.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
